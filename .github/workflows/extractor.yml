name: Extract OnePlus OPS Firmware

on:
  workflow_dispatch:
    inputs:
      ops_firmware_url:
        description: 'URL of the firmware ZIP file (containing the .ops file)'
        required: true
        type: string
      output_directory:
        description: 'Directory to store extracted files (e.g., extracted_firmware)'
        required: false
        default: 'extracted_firmware'
        type: string

jobs:
  extract_firmware:
    runs-on: ubuntu-latest

    permissions: # Add these permissions for the default GITHUB_TOKEN
      contents: write # Needed for creating and pushing tags (for the release)
      releases: write # Needed for creating releases and uploading assets

    steps:
      - name: Checkout firmware extraction repository
        uses: actions/checkout@v4
        with:
          path: workflow_repo # This is where your current repository (with the .yml file) is checked out

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Clone oppo_decrypt tool
        run: |
          git clone https://github.com/bkerler/oppo_decrypt.git
          cd oppo_decrypt
          pip3 install -r requirements.txt

      - name: Download Firmware ZIP
        run: |
          curl -L -o firmware.zip "${{ github.event.inputs.ops_firmware_url }}"

      - name: Unzip Firmware Archive
        run: |
          mkdir -p temp_firmware_unzip
          unzip -o firmware.zip -d temp_firmware_unzip/
          echo "Contents of temp_firmware_unzip:"
          ls -R temp_firmware_unzip/

      - name: Find and Extract OPS firmware
        id: extract_ops_step
        run: |
          OPS_FILE=$(find temp_firmware_unzip/ -name "*.ops" -print -quit)

          if [ -z "$OPS_FILE" ]; then
              echo "ERROR: No .ops file found in the unzipped archive!"
              exit 1
          fi

          echo "Found OPS file: $OPS_FILE"
          EXTRACT_TARGET_DIR="workflow_repo/extracted_firmware_output"
          mkdir -p "$EXTRACT_TARGET_DIR" # Ensure the directory exists

          python3 oppo_decrypt/opscrypto.py decrypt "$OPS_FILE" --extractdir="$EXTRACT_TARGET_DIR"
          echo "extracted_output_path=$EXTRACT_TARGET_DIR" >> $GITHUB_OUTPUT # Keep this output for consistency if needed elsewhere

          if [ ! -f "$EXTRACT_TARGET_DIR/op1.img" ]; then
              echo "ERROR: op1.img not found at $EXTRACT_TARGET_DIR/op1.img after extraction!"
              exit 1
          fi
          echo "op1.img extracted to $EXTRACT_TARGET_DIR/op1.img"

      - name: Generate Release Tag
        id: generate_tag
        run: |
          cd workflow_repo
          RELEASE_TAG="op1-release-$(date +%Y%m%d%H%M%S)-${GITHUB_RUN_ID}"
          echo "Generated Release Tag: $RELEASE_TAG"
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          git config user.name "github-actions[bot]"
          git config user.email "41899989+github-actions[bot]@users.noreply.github.com"
          git tag "$RELEASE_TAG"
          git push origin "$RELEASE_TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate_tag.outputs.release_tag }} # Use the tag generated in the previous step
          release_name: Release ${{ steps.generate_tag.outputs.release_tag }}
          body: |
            Automatic release of op1.img from firmware extraction workflow.
            This release was triggered by a workflow_dispatch event.
            Workflow Run ID: ${{ github.run_id }}
          draft: false # Set to true if you want to manually publish later
          prerelease: false # Set to true if this is a pre-release

      - name: Upload op1.img to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # URL provided by the create_release step
          asset_path: workflow_repo/extracted_firmware_output/op1.img # UPDATED PATH: Point to the extracted op1.img within the current repo's checkout
          asset_name: op1.img # The name for the file on the release
          asset_content_type: application/octet-stream # Standard content type for a binary file

      - name: Clean up temporary files (Optional)
        run: |
          rm firmware.zip
          rm -rf temp_firmware_unzip/
          rm -rf workflow_repo/extracted_firmware_output/
