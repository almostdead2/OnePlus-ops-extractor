name: Extract OnePlus OPS Firmware

on:
  workflow_dispatch:
    inputs:
      ops_firmware_url:
        description: 'URL of the firmware ZIP file (containing the .ops file)'
        required: true
        type: string
      output_directory:
        description: 'Directory to store extracted files (e.g., extracted_firmware)'
        required: false
        default: 'extracted_firmware'
        type: string

jobs:
  extract_firmware:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout firmware extraction repository
        uses: actions/checkout@v4
        with:
          path: workflow_repo

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Clone oppo_decrypt tool
        run: |
          git clone https://github.com/bkerler/oppo_decrypt.git
          cd oppo_decrypt
          pip3 install -r requirements.txt

      - name: Download Firmware ZIP
        run: |
          curl -L -o firmware.zip "${{ github.event.inputs.ops_firmware_url }}"

      - name: Unzip Firmware Archive
        run: |
          mkdir -p temp_firmware_unzip
          unzip -o firmware.zip -d temp_firmware_unzip/
          echo "Contents of temp_firmware_unzip:"
          ls -R temp_firmware_unzip/

      - name: Find and Extract OPS firmware
        id: extract_ops_step
        run: |
          OPS_FILE=$(find temp_firmware_unzip/ -name "*.ops" -print -quit)

          if [ -z "$OPS_FILE" ]; then
              echo "ERROR: No .ops file found in the unzipped archive!"
              exit 1
          fi

          echo "Found OPS file: $OPS_FILE"

          python3 oppo_decrypt/opscrypto.py decrypt "$OPS_FILE" --extractdir="${{ github.workspace }}/${{ github.event.inputs.output_directory }}"
          echo "extracted_output_path=${{ github.workspace }}/${{ github.event.inputs.output_directory }}" >> $GITHUB_OUTPUT

      - name: Convert op1.img to raw and rename
        run: |
          EXTRACTED_DIR="${{ github.workspace }}/${{ github.event.inputs.output_directory }}"
          SOURCE_SPARSE_IMG="$EXTRACTED_DIR/op1.img"
          TEMP_RAW_IMG="$EXTRACTED_DIR/op1.raw.img"
          SIMG2IMG_PATH="workflow_repo/simg2img"

          echo "Ensuring simg2img has execute permissions..."
          chmod +x "$SIMG2IMG_PATH"

          echo "Checking for simg2img at: $SIMG2IMG_PATH"
          if [ ! -f "$SIMG2IMG_PATH" ]; then
            echo "ERROR: simg2img not found at $SIMG2IMG_PATH. Please ensure it's committed to your repository."
            exit 1
          fi

          if [ ! -f "$SOURCE_SPARSE_IMG" ]; then
            echo "ERROR: op1.img not found at $SOURCE_SPARSE_IMG. Cannot convert."
            exit 1
          fi

          echo "Converting $SOURCE_SPARSE_IMG to raw ($TEMP_RAW_IMG)..."
          "$SIMG2IMG_PATH" "$SOURCE_SPARSE_IMG" "$TEMP_RAW_IMG"

          echo "Deleting original sparse op1.img..."
          rm -f "$SOURCE_SPARSE_IMG"

          echo "Renaming $TEMP_RAW_IMG to op1.img..."
          mv "$TEMP_RAW_IMG" "$SOURCE_SPARSE_IMG"

          echo "Conversion and renaming complete. Contents of output directory:"
          ls -lh "$EXTRACTED_DIR"

      - name: Checkout Android Repository (Porting)
        uses: actions/checkout@v4
        with:
          repository: almostdead2/Porting
          token: ${{ secrets.REPO_PUSH_TOKEN }}
          ref: test1
          path: Porting_repo

      - name: Copy op1.img to Android Repository
        run: |
          SOURCE_FILE="${{ steps.extract_ops_step.outputs.extracted_output_path }}/op1.img"
          DEST_DIR="Porting_repo/"

          echo "Attempting to copy from: $SOURCE_FILE"
          echo "To destination directory: $DEST_DIR"

          if [ ! -f "$SOURCE_FILE" ]; then
            echo "ERROR: op1.img not found at $SOURCE_FILE after extraction!"
            exit 1
          fi

          mkdir -p "$DEST_DIR"
          cp -f "$SOURCE_FILE" "$DEST_DIR"

          echo "Copied op1.img to $DEST_DIR"

      - name: Commit and Push to Android Repository
        run: |
          cd Porting_repo
          git config user.name "github-actions[bot]"
          git config user.email "41899989+github-actions[bot]@users.noreply.github.com"

          if [ -f "op1.img" ]; then
            git add op1.img
            git commit -m "feat: Update op1.img from firmware extraction workflow run ${{ github.run_id }}"
            git push origin test1
            echo "Successfully pushed op1.img to Porting/test1"
          else
            echo "op1.img not found in Porting_repo, skipping commit and push."
          fi

      - name: Clean up temporary files (Optional)
        run: |
          rm firmware.zip
          rm -rf temp_firmware_unzip/
          rm -rf workflow_repo/
          rm -rf Porting_repo/
